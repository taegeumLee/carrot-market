generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String?  @unique
  password   String?
  phone      String?  @unique
  github_id  String?  @unique
  google_id  String?  @unique
  avatar     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tokens   SMSToken[]
  Products Product[]
  Posts    Post[]
  Comments Comment[]
  Like     Like[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId Int
}

model Product {
  id          Int    @id @default(autoincrement())
  title       String
  price       Int
  description String
  photos      String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  views       Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  Comments Comment[]
  Likes    Like[]
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@id(name: "id", [userId, postId])
}

model Comment {
  id      Int    @id @default(autoincrement())
  payload String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
